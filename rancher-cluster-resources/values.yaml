additionalLabels: {}
affinity: {}
autoDiscovery:
  clusterName: {{ INSERT CLUSTER NAME HERE }}
  roles:
    - worker
  tags:
    - k8s.io/cluster-autoscaler/enabled
    - k8s.io/cluster-autoscaler/{{ .Values.autoDiscovery.clusterName }}
autoscalingGroups: []
autoscalingGroupsnamePrefix: []
awsAccessKeyID: ''
awsRegion: us-east-1
awsSecretAccessKey: ''
azureClientID: ''
azureClientSecret: ''
azureClusterName: ''
azureNodeResourceGroup: ''
azureResourceGroup: ''
azureSubscriptionID: ''
azureTenantID: ''
azureUseManagedIdentityExtension: false
azureVMType: AKS
cloudConfigPath: /etc/gce.conf
cloudProvider: clusterapi # important deviation from defeault
containerSecurityContext: {}
dnsPolicy: ClusterFirst
envFromConfigMap: ''
envFromSecret: ''
expanderPriorities: {}
extraArgs:
  logtostderr: true
  stderrthreshold: info
  v: 4
# Leverages local service account
  clusterapi-cloud-config-authoritative: true
# Uses default kubeconfig generated by Rancher
  kubeconfig: /etc/kubeconfig/value
# Namespace needs to exist on autoscaled cluster
  namespace: kube-system
# Important for determining which resources to scale
  node-group-auto-discovery: clusterapi:clusterName={{ INSERT CLUSTER NAME HERE }}
extraEnv: {}
extraEnvConfigMaps: {}
extraEnvSecrets: {}
extraVolumeMounts:
# Needed to access the autoscaled cluster
  - mountPath: /etc/kubeconfig/
    name: kubeconfig
extraVolumeSecrets: {}
extraVolumes:
# Needed to access the autoscaled cluster
  - name: kubeconfig
    secret:
      secretName: {{ INSERT CLUSTER NAME HERE }}-kubeconfig
fullnameOverride: ''
image:
  pullPolicy: IfNotPresent
  pullSecrets: []
  repository: k8s.gcr.io/autoscaling/cluster-autoscaler
  tag: v1.21.1
kubeTargetVersionOverride: ''
magnumCABundlePath: /etc/kubernetes/ca-bundle.crt
magnumClusterName: ''
nameOverride: ''
nodeSelector: {}
podAnnotations: {}
podDisruptionBudget:
  maxUnavailable: 1
podLabels: {}
priorityClassName: ''
priorityConfigMapAnnotations: {}
prometheusRule:
  additionalLabels: {}
  enabled: false
  interval: null
  namespace: monitoring
  rules: []
rbac:
  create: true
  pspEnabled: false
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ''
replicaCount: 1
resources: {}
securityContext: {}
service:
  annotations: {}
  externalIPs: []
  labels: {}
  loadBalancerIP: ''
  loadBalancerSourceRanges: []
  portName: http
  servicePort: 8085
  type: ClusterIP
serviceMonitor:
  enabled: false
  interval: 10s
  namespace: monitoring
  path: /metrics
  selector:
    release: prometheus-operator
tolerations: []
updateStrategy: {}
